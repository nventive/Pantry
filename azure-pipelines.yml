
pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: GitVersion@4
  displayName: Git Version
  inputs:
    updateAssemblyInfo: false

- task: NuGetCommand@2
  displayName: Nuget restore
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'

- script: dotnet build --no-restore --configuration $(buildConfiguration) -p:Version=$(GitVersion.NuGetVersionV2) -p:FileVersion=$(GitVersion.AssemblySemVer) -p:InformationalVersion=$(GitVersion.InformationalVersion)
  workingDirectory: src
  displayName: Build solution

- script: dotnet test --no-build --configuration $(buildConfiguration) --logger:trx --collect "XPlat Code Coverage"
  displayName: Test
  workingDirectory: src
  env:
    ConnectionStrings__StorageConnectionString: $(ConnectionStrings__StorageConnectionString)

- task: PublishTestResults@2
  displayName: Publish Tests Results
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    mergeTestResults: true
    testRunTitle: 'Unit tests'

- task: reportgenerator@4
  displayName: "Generate Code Coverage Report"
  inputs:
    reports: "src/**/coverage.cobertura.xml"
    reporttypes: "HtmlInline_AzurePipelines;Cobertura"
    targetdir: "$(System.DefaultWorkingDirectory)/coveragereport"
    assemblyfilters: "-xunit*;-microsoft*"

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage Results
  inputs:
    summaryFileLocation: "$(System.DefaultWorkingDirectory)/coveragereport/Cobertura.xml"
    reportDirectory: "$(System.DefaultWorkingDirectory)/coveragereport"

- script: dotnet pack --no-build --configuration $(buildConfiguration) -p:Version=$(GitVersion.NuGetVersionV2) --output $(build.artifactStagingDirectory)
  workingDirectory: src
  displayName: Pack

- task: NuGetToolInstaller@1
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['forcePushNuget'])))
  inputs:
    checkLatest: true

- task: NuGetCommand@2
  displayName: NuGet Pack Templates
  inputs:
    command: custom
    arguments: pack templates/Pantry.Templates.nuspec -OutputDirectory $(build.artifactStagingDirectory) -version $(GitVersion.NuGetVersionV2) -NoDefaultExcludes

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'

- task: NuGetCommand@2
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['forcePushNuget'])))
  inputs:
    command: 'push'
    packagesToPush: '$(build.artifactStagingDirectory)/**/*.nupkg;!$(build.artifactStagingDirectory)/**/*.snupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nventive'
